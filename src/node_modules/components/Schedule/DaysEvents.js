import React, { Component } from 'react'
import { Collection, ScrollSync } from 'react-virtualized'
import R, {
  identity,
  compose,
  values,
  keys,
  omit,
  set,
  lensProp,
  sortBy,
  prop,
  maxBy
} from 'ramda'
import Event from './Event'
import moment from 'moment'
import assignRows from './row-computer/assign-rows'
import { numHours, getPixelCount, getHourCount } from './util'

const sortedIds = compose(sortBy(identity), keys)

class DaysEvents extends Component {
  constructor(props) {
    super(props)
    this.state = {
      extraCells: 0,
      isDragging: false,
      scrollLeft: 0,
      numDays: 30
    }
  }

  componentDidMount() {
    this.props.onUpdate(assignRows({ events: this.props.events })).then(() => {
      this.updateCollection()
    })
  }

  componentWillReceiveProps = nextProps => {
    if (typeof nextProps.scrollLeft === 'number') {
      this.setState(
        { numDays: Math.ceil((nextProps.scrollLeft + 1512) / 216) },
        () => {
          this.updateCollection()
          this.setState({ scrollLeft: nextProps.scrollLeft })
        }
      )
    } else {
      this.setState({ scrollLeft: nextProps.scrollLeft })
    }
  }

  positionEvents = () => {
    const { events } = this.props
    const _ids = sortedIds(events)

    return _ids.map(_id => {
      const event = events[_id]
      const row = parseInt(event.row)
      const y = row * 75
      const x = getPixelCount(moment().startOf('day'), event.rangeStart)
      const width = getPixelCount(event.rangeStart, event.rangeEnd)
      const height = 70
      return { _id, y, x, width, height }
    })
  }

  cellRenderer = ({ key, style, index }) => {
    const eventCount = this.eventsCellCount()
    if (index >= eventCount) {
      return this.weekDayCellRenderer({ key, style, index: index - eventCount })
    }
    const events = this.props.events
    const _ids = sortedIds(events)
    const _id = _ids[index]
    if (!_id) {
      return <div id="phantom" key={key} style={style} />
    }
    const event = events[_id]
    const translateY = style.top
    return (
      <div key={key}>
        <Event
          scrollTop={this.props.scrollTop}
          event={{ ...event, row: (style.top - 50) / 75 }}
          onClick={this.props.onEventClick}
          translateY={translateY}
          handleStop={this.handleStop}
          style={{ ...style, top: 0 }}
          handleStart={this.handleStart}
          isDragging={this.state.isDragging}
          describeEvent={this.props.describeEvent}
        />
      </div>
    )
  }

  cellSizeAndPositionGetter = events => {
    this.maxRow = R.reduce(R.max, 0, R.map(R.prop('row'), values(events)))
    const positionedEvents = this.positionEvents(events)
    return ({ index }) => {
      const eventCount = this.eventsCellCount()
      if (index >= eventCount) {
        return this.weekDayCellSizeAndPositionGetter({
          index: index - eventCount
        })
      }
      const datum = positionedEvents[index]
      if (!datum)
        return {
          height: 50,
          width: 50,
          x: 0,
          y: Math.max(550, (this.maxRow || 0) * 75 + 50)
        }

      return {
        height: datum.height,
        width: datum.width,
        x: datum.x,
        y: (datum.y || 0) + 50
      }
    }
  }

  handleStop = extend => (_, drag, event) => {
    const pixelOffset = drag.x
    const hourOffset = getHourCount(pixelOffset)
    const updatedEvent = {
      ...event,
      rangeStart:
        extend !== 'END'
          ? moment(event.rangeStart).add(hourOffset, 'hours')
          : event.rangeStart,
      rangeEnd:
        extend !== 'START'
          ? moment(event.rangeEnd).add(hourOffset, 'hours')
          : event.rangeEnd
    }
    const nextEvents = assignRows({
      events: {
        ...this.props.events,
        [event._id]: updatedEvent
      }
    })
    const update = this.props.onUpdate(nextEvents)
    if (update instanceof Promise) {
      // update with predicted events
      this.setState({ predictedEvents: nextEvents, isDragging: false })
      this.updateCollection()

      update.then(() => {
        // update with actual events
        this.setState({ predictedEvents: null })
        this.updateCollection()
      })
    } else {
      this.setState({ isDragging: false })
      this.updateCollection()
    }
  }

  handleStart = _id => {
    const updatedEvents = assignRows({
      events: this.props.events,
      isolateId: _id
    })
    const eventsWithRows = this.props.onUpdate(updatedEvents).then(() => {
      this.setState({ isDragging: _id }, () => this.updateCollection())
    })
  }

  updateCollection() {
    this.setState({ extraCells: this.state.extraCells >= 1 ? 0 : 1 })
  }

  updatePhantomElement = ({ scrollWidth, scrollLeft }) => {
    if (scrollLeft + 1512 >= scrollWidth) {
      this.setState({
        numDays: Math.min(365, Math.ceil((scrollWidth + 1512) / 216))
      })
      this.updateCollection()
    }
  }

  weekDayCellRenderer = ({ key, style, index }) => {
    const day = moment().startOf('day').add(index, 'days').format('ddd M/DD')
    return (
      <div
        style={{ ...style, zIndex: -1 }}
        key={`${day} ${index}`}
        className="br b--light-gray top-0 h-100"
      >
        <div className="bg-white w-100 tc pa2 bb b--light-gray">
          {day}
        </div>
      </div>
    )
  }

  weekDayCellSizeAndPositionGetter = ({ index }) => {
    const sizeAndPosition = {
      height: this.props.scrollHeight,
      width: 216,
      x: 216 * index,
      y: 0
    }
    return sizeAndPosition
  }

  eventsCellCount = () =>
    values(this.props.events).length + this.state.extraCells + 2

  sortEvents = () => {
    const sortedEvents = assignRows({
      events: this.props.events,
      sortByProp: 'timestamp'
    })
    this.props.onUpdate(sortedEvents).then(() => this.updateCollection())
  }

  render() {
    const { events } = this.props
    const cellCount = this.state.numDays + this.eventsCellCount()
    const cellSizeAndPositionGetter = this.cellSizeAndPositionGetter(events)

    return (
      <div>
        <Collection
          onScroll={args => {
            this.props.onScroll(args)
            this.updatePhantomElement(args)
          }}
          ref={collection => (this.collection = collection)}
          cellCount={cellCount}
          cellRenderer={this.cellRenderer}
          cellSizeAndPositionGetter={cellSizeAndPositionGetter}
          verticalOverscanSize={this.maxRow * 75 + 50}
          scrollLeft={this.state.scrollLeft}
          height={this.props.height}
          width={1512}
          style={{ outline: 'none' }}
        />
      </div>
    )
  }
}

export default DaysEvents
